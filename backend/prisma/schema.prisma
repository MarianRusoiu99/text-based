generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  username            String               @unique
  email               String               @unique
  passwordHash        String               @map("password_hash")
  displayName         String?              @map("display_name")
  bio                 String?
  avatarUrl           String?              @map("avatar_url")
  isVerified          Boolean              @default(false) @map("is_verified")
  isActive            Boolean              @default(true) @map("is_active")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  lastLogin           DateTime?            @map("last_login")
  
  // Relations
  stories             Story[]
  refreshTokens       RefreshToken[]
  verificationTokens  VerificationToken[]
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model Story {
  id                String          @id @default(uuid())
  authorId          String          @map("author_id")
  title             String
  description       String?
  coverImageUrl     String?         @map("cover_image_url")
  category          String?
  tags              String          @default("") // Store as comma-separated string for SQLite
  isPublished       Boolean         @default(false) @map("is_published")
  isFeatured        Boolean         @default(false) @map("is_featured")
  visibility        String          @default("public")
  contentRating     String          @default("general") @map("content_rating")
  estimatedDuration Int?            @map("estimated_duration")
  rpgTemplateId     String?         @map("rpg_template_id")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  publishedAt       DateTime?       @map("published_at")
  
  // Relations
  author            User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  nodes             Node[]
  variables         StoryVariable[]
  items             Item[]

  @@map("stories")
}

model Node {
  id        String   @id @default(uuid())
  storyId   String   @map("story_id")
  nodeType  String   @default("story") @map("node_type")
  title     String
  content   String   // JSON string
  position  String   // JSON string for position data
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  story   Story   @relation(fields: [storyId], references: [id], onDelete: Cascade)
  choices Choice[]

  @@map("nodes")
}

model Choice {
  id         String   @id @default(uuid())
  fromNodeId String   @map("from_node_id")
  toNodeId   String   @map("to_node_id")
  text       String
  conditions String?  // JSON string
  effects    String?  // JSON string
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  fromNode Node @relation(fields: [fromNodeId], references: [id], onDelete: Cascade)

  @@map("choices")
}

model StoryVariable {
  id                 String  @id @default(uuid())
  storyId            String  @map("story_id")
  variableName       String  @map("variable_name")
  variableType       String  @default("string") @map("variable_type")
  defaultValue       String? @map("default_value")
  variableDescription String? @map("variable_description")

  // Relations
  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([storyId, variableName])
  @@map("story_variables")
}

model Item {
  id          String  @id @default(uuid())
  storyId     String  @map("story_id")
  itemName    String  @map("item_name")
  description String?

  // Relations
  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@map("items")
}

model RefreshToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String    @map("user_id")
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  revokedAt DateTime? @map("revoked_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model VerificationToken {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  token     String    @unique
  type      String
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  token     String    @unique
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}