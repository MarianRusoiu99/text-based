generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  username            String               @unique @db.VarChar(50)
  email               String               @unique @db.VarChar(255)
  passwordHash        String               @map("password_hash") @db.VarChar(255)
  displayName         String?              @map("display_name") @db.VarChar(100)
  bio                 String?
  avatarUrl           String?              @map("avatar_url")
  isVerified          Boolean              @default(false) @map("is_verified")
  isActive            Boolean              @default(true) @map("is_active")
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime             @updatedAt @map("updated_at") @db.Timestamptz(6)
  lastLogin           DateTime?            @map("last_login") @db.Timestamptz(6)
  comments            Comment[]
  passwordResetTokens PasswordResetToken[]
  playSessions        PlaySession[]
  ratings             Rating[]
  refreshTokens       RefreshToken[]
  rpgTemplates        RpgTemplate[]
  savedGames          SavedGame[]
  stories             Story[]
  bookmarks           StoryBookmark[]
  userAchievements    UserAchievement[]
  followers           UserFollow[]         @relation("UserFollows")
  following           UserFollow[]         @relation("UserFollowing")
  verificationTokens  VerificationToken[]

  @@map("users")
}

model Story {
  id                String          @id @default(uuid())
  authorId          String          @map("author_id")
  title             String          @db.VarChar(255)
  description       String?
  coverImageUrl     String?         @map("cover_image_url")
  category          String?         @db.VarChar(50)
  tags              String[]
  isPublished       Boolean         @default(false) @map("is_published")
  isFeatured        Boolean         @default(false) @map("is_featured")
  visibility        String          @default("public") @db.VarChar(20)
  contentRating     String          @default("general") @map("content_rating") @db.VarChar(10)
  estimatedDuration Int?            @map("estimated_duration")
  rpgTemplateId     String?         @map("rpg_template_id")
  createdAt         DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime        @updatedAt @map("updated_at") @db.Timestamptz(6)
  publishedAt       DateTime?       @map("published_at") @db.Timestamptz(6)
  chapters          Chapter[]
  comments          Comment[]
  items             Item[]
  nodes             Node[]
  playSessions      PlaySession[]
  ratings           Rating[]
  savedGames        SavedGame[]
  author            User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  rpgTemplate       RpgTemplate?    @relation(fields: [rpgTemplateId], references: [id])
  bookmarks         StoryBookmark[]
  variables         StoryVariable[]

  @@map("stories")
}

model Chapter {
  id           String   @id @default(uuid())
  storyId      String   @map("story_id")
  title        String   @db.VarChar(255)
  description  String?
  chapterOrder Int      @map("chapter_order")
  isPublished  Boolean  @default(false) @map("is_published")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  story        Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  nodes        Node[]

  @@unique([storyId, chapterOrder])
  @@map("chapters")
}

model Node {
  id          String   @id @default(uuid())
  storyId     String   @map("story_id")
  chapterId   String?  @map("chapter_id")
  nodeType    String   @default("story") @map("node_type") @db.VarChar(20)
  title       String   @db.VarChar(255)
  content     Json
  position    Json
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  fromChoices Choice[] @relation("ChoiceFrom")
  toChoices   Choice[] @relation("ChoiceTo")
  chapter     Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  story       Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@map("nodes")
}

model Choice {
  id         String            @id @default(uuid())
  fromNodeId String            @map("from_node_id")
  toNodeId   String            @map("to_node_id")
  choiceText String            @map("choice_text")
  conditions Json?
  effects    Json?
  createdAt  DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  analytics  ChoiceAnalytics[]
  fromNode   Node              @relation("ChoiceFrom", fields: [fromNodeId], references: [id], onDelete: Cascade)
  toNode     Node              @relation("ChoiceTo", fields: [toNodeId], references: [id], onDelete: Cascade)

  @@map("choices")
}

model StoryVariable {
  id           String @id @default(uuid())
  storyId      String @map("story_id")
  variableName String @map("variable_name") @db.VarChar(100)
  variableType String @default("boolean") @map("variable_type") @db.VarChar(20)
  defaultValue Json?  @map("default_value")
  story        Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([storyId, variableName])
  @@map("story_variables")
}

model Item {
  id          String  @id @default(uuid())
  storyId     String  @map("story_id")
  itemName    String  @map("item_name") @db.VarChar(100)
  description String?
  imageUrl    String? @map("image_url")
  story       Story   @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([storyId, itemName])
  @@map("items")
}

model RpgTemplate {
  id          String   @id @default(uuid())
  creatorId   String   @map("creator_id")
  name        String   @db.VarChar(255)
  description String?
  version     String   @default("1.0.0") @db.VarChar(20)
  isPublic    Boolean  @default(false) @map("is_public")
  config      Json
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  stories     Story[]

  @@map("rpg_templates")
}

model PlaySession {
  id            String            @id @default(uuid())
  userId        String            @map("user_id")
  storyId       String            @map("story_id")
  currentNodeId String?           @map("current_node_id")
  gameState     Json              @map("game_state")
  isCompleted   Boolean           @default(false) @map("is_completed")
  startedAt     DateTime          @default(now()) @map("started_at") @db.Timestamptz(6)
  completedAt   DateTime?         @map("completed_at") @db.Timestamptz(6)
  lastPlayedAt  DateTime          @updatedAt @map("last_played_at") @db.Timestamptz(6)
  analytics     ChoiceAnalytics[]
  story         Story             @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("play_sessions")
}

model ChoiceAnalytics {
  id         String      @id @default(uuid())
  choiceId   String      @map("choice_id")
  sessionId  String      @map("session_id")
  selectedAt DateTime    @default(now()) @map("selected_at") @db.Timestamptz(6)
  choice     Choice      @relation(fields: [choiceId], references: [id], onDelete: Cascade)
  session    PlaySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("choice_analytics")
}

model Rating {
  id        String   @id @default(uuid())
  storyId   String   @map("story_id")
  userId    String   @map("user_id")
  rating    Int
  review    String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([storyId, userId])
  @@map("ratings")
}

model Comment {
  id              String    @id @default(uuid())
  storyId         String    @map("story_id")
  userId          String    @map("user_id")
  parentCommentId String?   @map("parent_comment_id")
  content         String
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies         Comment[] @relation("CommentReplies")
  story           Story     @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model UserFollow {
  id          String   @id @default(uuid())
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  follower    User     @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("user_follows")
}

model StoryBookmark {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  storyId   String   @map("story_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, storyId])
  @@map("story_bookmarks")
}

model Asset {
  id         String   @id @default(uuid())
  fileName   String   @map("file_name") @db.VarChar(255)
  fileUrl    String   @map("file_url")
  fileType   String   @map("file_type") @db.VarChar(50)
  fileSize   Int      @map("file_size")
  uploadedBy String   @map("uploaded_by")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("assets")
}

model RefreshToken {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  token      String    @unique
  expiresAt  DateTime  @map("expires_at") @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  revokedAt  DateTime? @map("revoked_at") @db.Timestamptz(6)
  replacedBy String?   @map("replaced_by")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model VerificationToken {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  token     String    @unique
  type      String    @db.VarChar(20)
  expiresAt DateTime  @map("expires_at") @db.Timestamptz(6)
  usedAt    DateTime? @map("used_at") @db.Timestamptz(6)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  token     String    @unique
  expiresAt DateTime  @map("expires_at") @db.Timestamptz(6)
  usedAt    DateTime? @map("used_at") @db.Timestamptz(6)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

model SavedGame {
  id            String   @id @default(uuid())
  userId        String   @map("user_id")
  sessionId     String   @map("session_id")
  storyId       String   @map("story_id")
  saveName      String   @map("save_name") @db.VarChar(255)
  currentNodeId String?  @map("current_node_id")
  gameState     Json     @map("game_state")
  isCompleted   Boolean  @default(false) @map("is_completed")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  story         Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("saved_games")
}

model Achievement {
  id               String            @id @default(uuid())
  name             String            @db.VarChar(255)
  description      String?
  iconUrl          String?           @map("icon_url")
  category         String            @db.VarChar(50)
  triggerType      String            @map("trigger_type") @db.VarChar(50)
  triggerData      Json?             @map("trigger_data")
  points           Int               @default(0)
  rarity           String            @default("common") @db.VarChar(20)
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(uuid())
  userId        String      @map("user_id")
  achievementId String      @map("achievement_id")
  unlockedAt    DateTime    @default(now()) @map("unlocked_at") @db.Timestamptz(6)
  progress      Json?
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}
