import { useAuthStore } from '../stores/authStore';
import { authApi, setTokens, clearTokens, type RegisterData, type LoginData, type ChangePasswordData, type UpdateProfileData, type User, ApiException } from '../lib/api';

interface AuthResponse {
  success: boolean;
  message: string;
  data?: {
    user: User;
    accessToken: string;
    refreshToken: string;
  };
}

interface ChangePasswordResponse {
  success: boolean;
  message: string;
}

interface ProfileResponse {
  success: boolean;
  data: User;
}

interface UpdateProfileResponse {
  success: boolean;
  message: string;
  data: User;
}

class AuthService {
  async register(data: RegisterData): Promise<AuthResponse> {
    try {
      const response = await authApi.register(data);
      
      if (response.success && response.data) {
        // Store auth data in Zustand store
        const authStore = useAuthStore.getState();
        authStore.login(response.data.user, response.data.accessToken, response.data.refreshToken);
        
        return { 
          success: true, 
          message: response.message || 'Registration successful', 
          data: response.data 
        };
      }
      
      return { success: false, message: 'Registration failed' };
    } catch (error) {
      console.error('Registration failed:', error);
      if (error instanceof ApiException) {
        return { success: false, message: error.message };
      }
      return { success: false, message: 'Registration failed' };
    }
  }

  async login(data: LoginData): Promise<AuthResponse> {
    try {
      const response = await authApi.login(data);

      if (response.success && response.data) {
        // Store auth data in Zustand store
        useAuthStore.getState().login(
          response.data.user,
          response.data.accessToken,
          response.data.refreshToken
        );

        return { 
          success: true, 
          message: response.message || 'Login successful', 
          data: response.data 
        };
      }

      return { success: false, message: 'Login failed' };
    } catch (error) {
      console.error('Login failed:', error);
      if (error instanceof ApiException) {
        return { success: false, message: error.message };
      }
      return { success: false, message: 'Login failed' };
    }
  }

  async logout(): Promise<void> {
    try {
      await authApi.logout();
    } catch (error) {
      console.error('Logout failed:', error);
    } finally {
      // Always clear local state even if API call fails
      useAuthStore.getState().logout();
    }
  }

  async getProfile(): Promise<ProfileResponse> {
    try {
      const response = await authApi.getProfile();
      
      if (response.success && response.data) {
        return { 
          success: true, 
          data: response.data 
        };
      }
      
      return { success: false, data: {} as User };
    } catch (error) {
      console.error('Failed to get profile:', error);
      if (error instanceof ApiException) {
        // If token is invalid, logout the user
        if (error.statusCode === 401) {
          useAuthStore.getState().logout();
        }
      }
      return { success: false, data: {} as User };
    }
  }

  async changePassword(data: ChangePasswordData): Promise<ChangePasswordResponse> {
    try {
      const response = await authApi.changePassword(data);
      
      return { 
        success: response.success, 
        message: response.message || 'Password changed successfully' 
      };
    } catch (error) {
      console.error('Failed to change password:', error);
      if (error instanceof ApiException) {
        return { success: false, message: error.message };
      }
      return { success: false, message: 'Failed to change password' };
    }
  }

  async updateProfile(data: UpdateProfileData): Promise<UpdateProfileResponse> {
    try {
      const response = await authApi.updateProfile(data);
      
      if (response.success && response.data) {
        // Update user in store
        const authStore = useAuthStore.getState();
        authStore.updateUser(response.data);
        
        return { 
          success: true, 
          message: response.message || 'Profile updated successfully',
          data: response.data 
        };
      }
      
      return { success: false, message: 'Failed to update profile', data: {} as User };
    } catch (error) {
      console.error('Failed to update profile:', error);
      if (error instanceof ApiException) {
        return { success: false, message: error.message, data: {} as User };
      }
      return { success: false, message: 'Failed to update profile', data: {} as User };
    }
  }

  async refreshToken(): Promise<boolean> {
    try {
      // This would need to be implemented in the API if not already
      // For now, just return false to trigger re-login
      return false;
    } catch (error) {
      console.error('Failed to refresh token:', error);
      return false;
    }
  }
}

export const authService = new AuthService();